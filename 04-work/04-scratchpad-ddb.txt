psql -U postgres
August

\?		list all the commands
\l		list databases
\l+		list databases with size
\conninfo	display information about current connection
\c database	connect to new database, e.g., \c template1
\d		check the database tables or schema
\d tablename	
\dt 		list tables of the public schema
\dt schemaname.* 	list tables of certain schema, e.g., \dt public.*
\dt *.* 		list tables of all schemas
Then you can run SQL statements, e.g., SELECT * FROM my_table;
(Note: a statement must be terminated with semicolon ;)
\q		quit psql


CSV Prep:
Remove headers & footers
Remove any/all empty rows at end.
It should just be pure data.
* Maybe copy headers for use during table naming of import data


create database unenergy2019
\c unenergy2019

\copy solar from C:\Users\Domhnall\Projects\class_col_databases\04-work\UNdata_Energy_Solar.csv delimiter ',' csv
\copy wind from C:\Users\Domhnall\Projects\class_col_databases\04-work\UNdata_Energy_Wind.csv delimiter ',' csv
\copy geotherm from C:\Users\Domhnall\Projects\class_col_databases\04-work\UNdata_Energy_GeoTherm.csv delimiter ',' csv

In create table below, 40 = character limit, use intelligently 

CREATE TABLE solar (
  country varchar(40),
  type varchar(40),
  year int,
  unit varchar(40),
  usage double precision,
  notes varchar(40)
);

Finding duplicates by comparing count of all entries and count of distinct
A pure duplicate, everything is identical so selecting to delete is impossible
	for this, there is a hidden ctid field for all entries in all sql databases

SELECT distinct country, year FROM solar ORDER BY country, year;
SELECT count(*) FROM solar;
SELECT count(*) FROM (distinct country, year FROM solar ORDER BY country, year) as sub;
SELECT COUNT(country), country, year FROM solar GROUP BY country, year ORDER BY count(country) DESC;

Individual duplicate removal where data is clearly wrong
DELETE FROM solar WHERE country = 'Australia' AND usage = 00 AND year = 2010;

(Bulk) Removal of identical duplicates where you have to rely on ctid
DELETE FROM solar WHERE ctid NOT IN		# deletes everything not fitting the sub that follows
	(SELECT MAX(dt.ctid			#   takes the largest ctid from a new datatable 
	FROM solar as dt			#   that datatable in the table 'solar'
	GROUP BY country, year, usage);		#   datatable should be established by every possible field for safety

Python Code:
import pg8000
conn = pg8000.connect(database="mondial", user="postgres", password="August")
print(type(conn))

tuple: a list that cannot be edited


DESC		Conditional of ORDER, reverses order
NULLS LAST	Conditional of ORDER, when you switch to DESC, this moves nulls to the end of the list (hiding them)
OR 		a reckless command that can bring in far more results than intended
LIKE ('F%')	wildcard for things starting with F in this example
IN		Conditional of WHERE . . . . . . . 
HAVING		is like WHERE, but WHERE is for Reg Queries (the things going into the aggregate) and HAVING applies to the GROUP all the stuff aggregated
JOIN  ON	Conditional of FROM field,
		See SQL Join graphic for basics, also CROSS JOIN is everything!
AS		Conditional of SELECT, an alias or rename of columns in the SELECT set. (eg. ROUND(AVG(percentage),2) AS AVERAGE publishes as average at the top of the column)
		AS can be omitted!!! The software understand. This will appear in the code of others!!!
COALESCE	checks for missing value and replace with statement. called "impute null values" eg. coalesce(FIELDTOCHECK, REPLACEWITHTHIS)





